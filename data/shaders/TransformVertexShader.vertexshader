#version 120

// Input vertex data, different for all executions of this shader.
attribute vec3 vertexPosition_modelspace;
attribute vec3 vertexColor;
attribute vec3 vertexNormal;
attribute vec2 vertexUV;

uniform mat3 m_3x3_inv_transp;
uniform mat4 M;


varying vec3 varyingNormalDirection;  // surface normal vector in world space

// Output data ; will be interpolated for each fragment.
varying vec2 UV;

varying vec3 fragVert;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

void main(){	

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
    
    fragVert = vertexPosition_modelspace;

    varyingNormalDirection = normalize(m_3x3_inv_transp * vertexNormal);

	// UV of the vertex. No special space for this one.
    UV = vertexUV;
}

